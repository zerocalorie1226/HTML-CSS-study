MVC 패턴: Model + View + Controller를 합친 용어입니다.

Model : 어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분입니다.
View : 사용자에서 보여지는 UI 부분입니다.
Controller : 사용자의 입력(Action)을 받고 처리하는 부분입니다.

MVC 패턴의 동작 순서
1.사용자의 Action들은 Controller에 들어오게 됩니다.
2.Controller는 사용자의 Action를 확인하고, Model을 업데이트합니다.
3.Controller는 Model을 나타내줄 View를 선택합니다.
4.View는 Model을 이용하여 화면을 나타냅니다.

장점:MVC 패턴의 장점은 널리 사용되고 있는 패턴이라는 점에 걸맞게 가장 단순합니다.
단점:MVC 패턴의 단점은 View와 Model 사이의 의존성이 높다는 것입니다. 

MVP 패턴: Model + View + Presenter를 합친 용어입니다. Model과 View는 MVC 패턴과 동일하고, Controller 대신 Presenter가 존재합니다. 

Model : 어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분입니다.
View : 사용자에서 보여지는 UI 부분입니다.
Presenter : View에서 요청한 정보로 Model을 가공하여 View에 전달해 주는 부분입니다. 

MVP 패턴의 동작 순서
1.사용자의 Action들은 View를 통해 들어오게 됩니다.
2.View는 데이터를 Presenter에 요청합니다.
3.Presenter는 Model에게 데이터를 요청합니다.
4.Model은 Presenter에서 요청받은 데이터를 응답합니다.
5.Presenter는 View에게 데이터를 응답합니다.
6.View는 Presenter가 응답한 데이터를 이용하여 화면을 나타냅니다.

장점:MVP 패턴의 장점은 View와 Model의 의존성이 없다는 것입니다.
단점:MVC 패턴의 단점인 View와 Model 사이의 의존성은 해결되었지만, View와 Presenter 사이의 의존성이 높은 가지게 되는 단점이 있습니다.

MVVM 패턴:Model + View + View Model를 합친 용어입니다.
Model : 어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분입니다.
View : 사용자에서 보여지는 UI 부분입니다.
View Model : View를 표현하기 위해 만든 View를 위한 Model입니다. 

MVVM 패턴의 동작 순서
1.사용자의 Action들은 View를 통해 들어오게 됩니다.
2.View에 Action이 들어오면, Command 패턴으로 View Model에 Action을 전달합니다.
3.View Model은 Model에게 데이터를 요청합니다.
4.Model은 View Model에게 요청받은 데이터를 응답합니다.
5.View Model은 응답 받은 데이터를 가공하여 저장합니다.
6.View는 View Model과 Data Binding하여 화면을 나타냅니다.

장점:MVVM 패턴은 View와 Model 사이의 의존성이 없습니다. 또한 Command 패턴과 Data Binding을 사용하여 View와 View Model 사이의 의존성 또한 없앤 디자인패턴입니다.
단점:MVVM 패턴의 단점은 View Model의 설계가 쉽지 않다는 점입니다.